---
AWSTemplateFormatVersion: '2010-09-09'

Description: A template to launch ADOP C with ELK service

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label:
          default: ADOP Initial Admin User Details
        Parameters:
          - AdopUsername
          - AdopUserPassword
      -
        Label:
          default: Network Configuration
        Parameters:
          - VpcID
          - VPCCidr
          - VPCSubnet
      -
        Label:
          default: Instance Configuration
        Parameters:
          - KeyName

Parameters:
  AdopUsername:
    Default: changeme
    Description: ADOP admin account username. Username can not be set to 'admin' or 'Admin' and it must contain only letters and numbers. Minimum length is 3.
    Type: String
    MinLength: '3'
    Default: 'devops'
    AllowedPattern: (?!admin|Admin)[A-Za-z0-9.]*
    ConstraintDescription: Username can not be set to 'admin' or 'Admin' and it must contain only letters and numbers and minimum length is 3.
  AdopUserPassword:
    NoEcho: 'true'
    Description: ADOP admin account password. Must be at least 8 characters long and contain at least one number, and cannot contain word "password" or your username.
    Type: String
    MinLength: '8'
    Default: 'D3v0p5T4mp4'
    AllowedPattern: (?!password|Password)[A-Za-z0-9]*([a-zA-Z]+[0-9]+|[0-9]+[a-zA-Z]+)
    ConstraintDescription: Password must contain only letters and numbers, it must contain at least one number, and cannot contain your username or word "password".  
  VpcID:
    Description: VPC ID where your instance will be created
    Type: AWS::EC2::VPC::Id
  VPCSubnet:
    Description: Subnet ID of your network
    Type: AWS::EC2::Subnet::Id
  KeyName:
    Description: Key-pair name to use. Make sure you choose a key which you have!
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-9887c6e7

Resources:
  ADOPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enabling access to all IPs and below listed ports from within VPC
      VpcId:
        Ref: VpcID
      SecurityGroupIngress:
      - CidrIp: "0.0.0.0/0"
        IpProtocol: "-1"
  ADOPEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: 'true'
          VolumeSize: 50
          VolumeType: gp2
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - 'AMI'
      InstanceType: t2.xlarge
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - DeleteOnTermination: 'true'
        DeviceIndex: '0'
        GroupSet:
          - Fn::GetAtt:
            - ADOPSecurityGroup
            - GroupId
        SubnetId:
          Ref: VPCSubnet
      Tags:
        - Key: Name
          Value: ADOP-C-ELK
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "=========================== Installing Yum Packages ==========================="
          yum update -y
          yum install git -y
          easy_install pip
          pip install ansible

          echo '=========================== Installing All Components =========================='
          git clone https://github.com/RobeDevOps/adop-ansible.git /home/centos/adop-ansible
          cd /home/centos/adop-ansible
          ansible-playbook main.yaml

          echo '=========================== ADOP Settings =========================='
          export IP=$(hostname --ip-address)
          export PRIVATE_IP=$(curl http://instance-data/latest/meta-data/local-ipv4)
          export PUBLIC_IP=$(curl http://instance-data/latest/meta-data/public-ipv4)
          export INITIAL_ADMIN_USER=${AdopUsername}
          export INITIAL_ADMIN_PASSWORD_PLAIN=${AdopUserPassword}
          export JENKINS_TOKEN=gAsuE35s

          echo '=========================== Run ADOP =========================='
          cd /home/centos/adop-docker-compose
          ./adop compose init --with-stdout

          echo '=========================== Setting up ADOP-C =========================='
          until [[ $(curl -X GET -s ${!INITIAL_ADMIN_USER}:${!INITIAL_ADMIN_PASSWORD_PLAIN}@${!PRIVATE_IP}/jenkins/job/Load_Platform/lastBuild/api/json?pretty=true|grep result|cut -d$' ' -f5|sed 's|[^a-zA-Z]||g') == SUCCESS ]]; do echo "Load_Platform job not finished, sleeping for 5s"; sleep 5; done
          
          echo "=========================== ADOP-C setup complete ==========================="
          curl -X PUT -H 'Content-Type:' --data-binary "{\"Status\": \"SUCCESS\",\"Reason\": \"ADOP is ready\",\"UniqueId\": \"ADOPEc2Instance\",\"Data\": \"Done\"}" "${ADOPWaitConditionHandle}"
  
  ADOPWaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  ADOPWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: ADOPEc2Instance
    Properties:
      Handle:
        Ref: ADOPWaitConditionHandle
      Timeout: 1000

Outputs:
  ReleaseNote:
    Description: This is your starting point, please copy this URL into your web browser.
    Value: !Join ["", [ "http://", !GetAtt ADOPEc2Instance.PublicIp, "/" ]]
